---
# Run cleanup tasks if `force_template_rebuild` is true
- name: Cleanup - Ensure existing cloud-image file is removed if force rebuilding
  file:
    path: "{{ img_dir }}/{{ ubuntu_img_template_url | basename }}"
    state: absent
  when: force_template_rebuild

- name: Cleanup - Delete Template VM
  proxmox_kvm:
    node: "{{ pve.proxmox_node }}"
    api_user: "{{ pve.proxmox_api_user }}"
    api_password: "{{ pve.proxmox_api_pass }}"
    api_host: "{{ proxmox_ip }}"
    name: "{{ vm_template.name }}"
    vmid: "{{ vm_template.vmid }}"    # Specifying a high value for my template
    state: absent
  when: force_template_rebuild

# Now start downloading/creating the template
- name: Ensure cloud-images directory exists
  file:
    path: "{{ img_dir }}"
    state: directory

- name: Download ubuntu cloud image
  get_url:
    url: "{{ ubuntu_img_template_url }}"
    dest: "{{ img_dir }}/{{ ubuntu_img_template_url | basename }}"

- name: Create new Template VM
  proxmox_kvm:
    node: "{{ pve.proxmox_node }}"
    api_user: "{{ pve.proxmox_api_user }}"
    api_password: "{{ pve.proxmox_api_pass }}"
    api_host: "{{ proxmox_ip }}"
    name: "{{ vm_template.name }}"
    vmid: "{{ vm_template.vmid }}"    # Specifying a high value for my template
    storage: "{{ vm_template.storage | default(vms_def.storage) }}"
    net:
      net0: "{{ vm_template.network_device | default(vms_def.network_device) }}"

- name: Check if the vm disk has already been created. If so, Skip creating another
  shell:
    cmd: lvs | grep {{ vm_template.vmid }}-disk | wc -l
  register: vm_disk_done

# Add disks after creating vm because `qm importdisk` is not supported in the proxmox ansible module, so can only attach it afterwards
- name: Import cloud image disk into VM
  shell:
    cmd: qm importdisk {{ vm_template.vmid }} {{ ubuntu_img_template_url | basename }} {{ vm_template.storage | default(vms_def.storage) }}
    chdir: "{{ img_dir }}"
  when: vm_disk_done.stdout | int < 1

- name: Set SCSI controller and add SCSI drive attaching disk
  shell:
    cmd: qm set {{ vm_template.vmid }} --scsihw virtio-scsi-pci --scsi0 {{ vm_template.storage | default(vms_def.storage) }}:vm-{{ vm_template.vmid }}-disk-0
  when: vm_disk_done.stdout | int < 1

- name: Check if cloudinit drive has already been created. If so, Skip creating another
  shell:
    cmd: lvs | grep {{ vm_template.vmid }}-cloudinit | wc -l
  register: vm_cloudinit_done

- name: Add Cloudinit disk
  shell:
    cmd: qm set {{ vm_template.vmid }} --ide2 {{ vm_template.storage | default(vms_def.storage) }}:cloudinit
  when: vm_cloudinit_done.stdout != '1'

- name: Set serial console
  shell:
    cmd: qm set {{ vm_template.vmid }} --serial0 {{ vm_template.serial | default(vms_def.serial) }} --vga {{ vm_template.vga | default(vms_def.vga) }}

- name: Cloud init setup
  proxmox_kvm:
    node: "{{ pve.proxmox_node }}"
    api_user: "{{ pve.proxmox_api_user }}"
    api_password: "{{ pve.proxmox_api_pass }}"
    api_host: "{{ proxmox_ip }}"
    vmid: "{{ vm_template.vmid }}"
    ipconfig:
      ipconfig0: "ip={{ vms_def.network }}200/{{ vms_def.netmask }},gw={{ vms_def.gateway }}"
    ciuser: "{{ vm_template.user | default(vms_def.user) }}"
    cipassword: "{{ vm_template.password | default(omit) }}" # OPTIONAL
    sshkeys: "{{ vm_template.ssh_key | default(vms_def.ssh_key) }}"
    boot: "{{ vm_template.boot_order | default(vms_def.boot_order) }}"
    bootdisk: "{{ vm_template.boot_disk | default(vms_def.boot_disk) }}"
    nameservers:
      - "{{ vm_template.dns1 | default(vms_def.dns1) }}"
      - "{{ vm_template.dns2 | default(vms_def.dns2) }}"
    cores: "{{ vm_template.cores | default(vms_def.cores) }}"
    memory: "{{ vm_template.ram| default(vms_def.ram) }}"
    update: yes

- name: Make this VM a template
  shell:
    cmd: qm template {{ vm_template.vmid }}
  ignore_errors: true   # If it's already a template it complains, it's also the last task so..
