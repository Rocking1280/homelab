#######################################
### THIS FILE IS MANAGED BY ANSIBLE ###
###    PLEASE MAKE CHANGES THERE    ###
#######################################

version: '3.7'
services:

  # TransmissionBT - Torrent Downloader
  # https://hub.docker.com/r/haugene/transmission-openvpn
  # ONLY ACCESSIBLE THROUGH https://domain.com/transmission/web/ if using PathPrefix
  transmission-vpn:
    container_name: transmission-vpn
    image: haugene/transmission-openvpn:latest
    restart: always
    healthcheck:
      test: curl -sI http://localhost:9091
      interval: 60s
      timeout: 3s
      retries: 3
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.169 # You can specify a static IP - I also created a non-proxied DNS record like 'transmission-dc.domain.com' pointing to this IP so i don't need to reference this all the time.
    ports:
     - ${TRANSMISSION_PORT}:9091  # Add port to host for home assistant
     - ${QBITTORRENT_PORT}:8787  # Add port to open qbittorrent from internal network
    cap_add:
      - NET_ADMIN
    # devices:
    #  - /dev/net/tun
    dns:
      - 1.1.1.1
      - 1.0.0.1
    volumes:
      - ${USERDIR}/mount/downloads:/downloads
      - ${DOCKERDIR}/transmission-vpn/data:/data
      - ${DOCKERDIR}/transmission-vpn/config:/config
      - ${DOCKERDIR}/transmission-vpn/watch:/watch
      - /etc/localtime:/etc/localtime:ro
    environment:
      <<: *default-tz-uid-gid
      OPENVPN_PROVIDER: ${VPN_PROVIDER}
      OPENVPN_USERNAME: ${VPN_USER}
      OPENVPN_PASSWORD: ${VPN_PASS}
      OPENVPN_OPTS: --inactive 3600 --ping 10 --ping-exit 60
      LOCAL_NETWORK: ${LOCAL_NETWORK}
      # Setting UID/GID in this container was breaking my NFS mounts because it was starting the transmission daemon as a non root user inside the container -> https://github.com/haugene/docker-transmission-openvpn/blob/master/transmission/userSetup.sh
      # There are no perm issues when leaving blank as transmission now runs as root inside the container.
      UMASK_SET: 002
      # Set to true and set user/pass if you want basic auth logins
      TRANSMISSION_RPC_AUTHENTICATION_REQUIRED: "false"
      # TRANSMISSION_RPC_USERNAME: ${SERVICES_USERNAME}
      # TRANSMISSION_RPC_PASSWORD: ${SERVICES_PASSWORD}
      TRANSMISSION_RPC_HOST_WHITELIST: "127.0.0.1,${SERVER_IP}"
      TRANSMISSION_RPC_WHITELIST: "127.0.0.1,${SERVER_IP}"
      TRANSMISSION_UMASK: 002
      TRANSMISSION_RATIO_LIMIT: 0
      TRANSMISSION_RATIO_LIMIT_ENABLED: "true"
      TRANSMISSION_ALT_SPEED_ENABLED: "false"
      TRANSMISSION_ALT_SPEED_DOWN: 1000  # alt speed currently disabled
      TRANSMISSION_ALT_SPEED_UP: 250 # alt speed currently disabled
      TRANSMISSION_SPEED_LIMIT_DOWN: 6000
      TRANSMISSION_SPEED_LIMIT_DOWN_ENABLED: "true"
      TRANSMISSION_SPEED_LIMIT_UP: 30
      TRANSMISSION_SPEED_LIMIT_UP_ENABLED: "true"
      TRANSMISSION_INCOMPLETE_DIR: /downloads/incomplete
      TRANSMISSION_INCOMPLETE_DIR_ENABLED: "true"
      TRANSMISSION_WATCH_DIR: /downloads
      TRANSMISSION_WATCH_DIR_ENABLED: "true"
      TRANSMISSION_DOWNLOAD_DIR: /downloads/complete
      TRANSMISSION_DOWNLOAD_QUEUE_SIZE: 50
      # LOG_TO_STDOUT: "true" # Enable if you need logging
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.transmission-vpn-rtr.entrypoints=https"
      - "traefik.http.routers.transmission-vpn-rtr.rule=Host(`transmission.$DOMAINNAME`, `torrent.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.transmission-vpn-rtr.middlewares=chain-oauth@file"  # Testing oauth
      # - "traefik.http.routers.transmission-vpn-rtr.middlewares=middlewares-rate-limit@file" # If oauth doesn't work because it uses a vpn, we need to at least rate limit
      ## HTTP Services
      - "traefik.http.routers.transmission-vpn-rtr.service=transmission-vpn-svc"
      - "traefik.http.services.transmission-vpn-svc.loadbalancer.server.port=9091"
