---
# Run cleanup tasks if `force_template_rebuild` is true
- name: Cleanup - Ensure existing cloud-image file is removed if force rebuilding
  file:
    path: "{{ img_dir }}/{{ debian_img_template_url | basename }}"
    state: absent
  when: force_template_rebuild

- name: Cleanup - Delete Template VM
  proxmox_kvm:
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_pass }}"
    api_host: "{{ proxmox_host }}"
    name: "{{ template_vm_debian_defaults.name }}"
    vmid: "{{ template_vm_debian.id }}"    # Specifying a high value for my template
    state: absent
  when: force_template_rebuild

# Now start downloading/creating the template
- name: Ensure cloud-images directory exists
  file:
    path: "{{ img_dir }}"
    state: directory

- name: Download debian cloud image
  get_url:
    url: "{{ debian_img_template_url }}"
    dest: "{{ img_dir }}/{{ debian_img_template_url | basename }}"

# We attach the scsi and cloudinit disks afterwards (manual qm commands) because the ansible module doesn't allow us to update them with `update: yes`
- name: Create new Template VM
  proxmox_kvm:
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_pass }}"
    api_host: "{{ proxmox_host }}"
    name: "{{ template_vm_debian_defaults.name }}"
    vmid: "{{ template_vm_debian.id }}"    # Specifying a high value for my template
    storage: "{{ template_vm_debian_defaults.storage }}"
    net:
      net0: "{{ template_vm_debian_defaults.network_device }}"

- name: Check if volume has been created
  stat:
    path: /var/lib/vz/images/{{ template_vm_debian.id }}/base-{{ template_vm_debian.id }}-disk-0.raw
  register: disk_volume_status

# Add disks after creating vm because `qm importdisk` is not supported in the proxmox ansible module, so can only attach it afterwards
- name: Import cloud image disk into VM
  shell:
    cmd: qm importdisk {{ template_vm_debian.id }} {{ debian_img_template_url | basename }} {{ template_vm_debian_defaults.storage }}
    chdir: "{{ img_dir }}"
  when: not disk_volume_status.stat.exists

- name: Set SCSI controller and add SCSI drive attaching disk
  shell:
    cmd: qm set {{ template_vm_debian.id }} --scsihw {{ template_vm_debian_defaults.scsihw }} --scsi0 /var/lib/vz/images/{{ template_vm_debian.id }}/vm-{{ template_vm_debian.id }}-disk-0.raw
  when: not disk_volume_status.stat.exists

- name: Check if cloudinit drive has already been created. If so, Skip creating another
  stat:
    path: /var/lib/vz/images/{{ template_vm_debian.id }}/vm-{{ template_vm_debian.id }}-cloudinit.qcow2
  register: cloudinit_volume_status

- name: Add Cloudinit disk
  shell:
    cmd: qm set {{ template_vm_debian.id }} --ide2 {{ template_vm_debian_defaults.storage }}:cloudinit
  when: not cloudinit_volume_status.stat.exists

- name: Set serial console if defined in vars
  shell:
    cmd: qm set {{ template_vm_debian.id }} --serial0 {{ template_vm_debian_defaults.serial }} --vga {{ template_vm_debian_defaults.vga }}
  when:
    - template_vm_debian_defaults.serial is defined
    - template_vm_debian_defaults.vga is defined

# When cloning the VM, we add all the other hardware, perform updates, etc.
# Leave this template minimal, what is below should suffice. No warranties provided.
- name: Update VM and Cloud init setup
  proxmox_kvm:
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_pass }}"
    api_host: "{{ proxmox_host }}"
    vmid: "{{ template_vm_debian.id }}"
    ipconfig: "{{ template_ipconfig }}"
    ciuser: "{{ template_vm_debian_defaults.user }}"
    cipassword: "{{ template_vm_debian_defaults.password | default(omit) }}" # OPTIONAL
    sshkeys: "{{ template_vm_debian_defaults.ssh_key }}"
    boot: "{{ template_vm_debian_defaults.boot_order }}"
    bootdisk: "{{ template_vm_debian_defaults.boot_disk }}"
    nameservers: "{{ template_vm_debian_defaults.nameservers }}"
    cores: "{{ template_vm_debian_defaults.cores }}"
    memory: "{{ template_vm_debian_defaults.memory }}"
    update: yes

- name: Make this VM a template
  shell:
    cmd: qm template {{ template_vm_debian.id }}
  ignore_errors: true   # If it's already a template it complains, it's also the last task so..
