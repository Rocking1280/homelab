---
version: "3"

tasks:

  login:
    desc: Creates doppler dir if it doesn't exist and Login to Doppler from inside the container. The volume is mounted in the docker run cmd so it persists upon re-creation unless re-cloning the repo.
    internal: true
    run: once
    # env:
    #   DOPPLER_CONFIG: "{{.PROJECT_DIR}}/.doppler"
    status: # Check if doppler token exists in file, means we've already logged in, otherwise login!
      - grep -q '\s\+token' ${HOME}/.doppler/.doppler.yaml
    cmds:
      - "test -d ${HOME}/.doppler || mkdir ${HOME}/.doppler"
      - task: ':workstation:run-docker-dotfiles'
      - "{{.DOCKER_EXEC_CMD}} doppler login"
      - "{{.DOCKER_EXEC_CMD}} doppler setup --scope {{.HOMELAB_DIR}}"

  push-inventory:
    desc: Push file `provision/ansible/inventory/generated.yml` back to Doppler (i.e. if you modify the file in your IDE, use this task to just push it back, don't need GUI!)
    dir: provision/ansible/inventory
    aliases: ["p"]
    silent: true
    run: once
    cmds:
      - cat generated.yml | doppler secrets set ANSIBLE_HOSTS_INVENTORY
      - echo "Please ensure your file was saved... otherwise save and redo."

  # This task is required by multiple other taskfiles, call it with `:doppler:generate-ansible-inventory`
  generate-ansible-inventory:
    desc: Copy plain yaml inventory file from doppler and output/overwrite generated inventory
    dir: provision/ansible/inventory
    aliases: ["g"]
    run: once
    vars:
      DOPPLER_GET_INVENTORY: '{{default "ANSIBLE_HOSTS_INVENTORY" .DOPPLER_GET_INVENTORY}}'
    # preconditions:
    #   # If file doesn't exist, create it or;
    #   # Check if what is in doppler is different from local inventory file, let user handle it as they could be making changes locally which we do not with to override
    #   - sh: "[[ -f {{.ANSIBLE_INVENTORY_FILENAME}} ]] || diff -q generated.yml <({{.DOPPLER_GET_INVENTORY_CMD}})"
    #     msg: |
    #       Inventory file '{{.ANSIBLE_INVENTORY_DIR}}/{{.ANSIBLE_INVENTORY_FILENAME}}' and doppler secret ANSIBLE_HOSTS_INVENTORY have diverged.
    #       If you have made changes to the generated inventory file that was downloaded from doppler locally, then please save the inventory file
    #       and ensure you've pushed this to doppler with command `task dp:p` so that it pulls down the latest inventory before proceeding!
    cmds:
      - "doppler secrets get {{.DOPPLER_GET_INVENTORY}} --plain > {{.ANSIBLE_INVENTORY_FILENAME}}"

  push-k3s-inventory:
    desc: Push file `provision/k3s-ansible/inventory/generated.ini` back to Doppler (i.e. if you modify the file in your IDE, use this task to just push it back, don't need GUI!)
    dir: provision/k3s-ansible/inventory
    aliases: ["pk"]
    silent: true
    run: once
    cmds:
      - cat generated.ini | doppler secrets set K3S_ANSIBLE_HOSTS_INVENTORY
      - echo "Please ensure your file was saved... otherwise save and redo."

  # This task is required by multiple other taskfiles, call it with `:doppler:generate-ansible-inventory`
  generate-k3s-ansible-inventory:
    desc: Copy plain yaml inventory file from doppler and output/overwrite generated inventory
    dir: provision/k3s-ansible/inventory
    # run: once
    internal: true
    vars:
      DOPPLER_K3S_HOSTS_INVENTORY_VAR: '{{default "K3S_ANSIBLE_HOSTS_INVENTORY" .DOPPLER_K3S_HOSTS_INVENTORY_VAR}}'
    # preconditions:
    #   # If file doesn't exist, create it or;
    #   # Check if what is in doppler is different from local inventory file, let user handle it as they could be making changes locally which we do not with to override
    #   - sh: "[[ -f {{.K3S_ANSIBLE_INVENTORY_FILENAME}} ]] || diff -q {{.K3S_ANSIBLE_INVENTORY_FILENAME}} <({{.DOPPLER_K3S_HOSTS_INVENTORY_VAR}})"
    #     msg: |
    #       Inventory file '{{.K3S_ANSIBLE_INVENTORY_DIR}}/{{.K3S_ANSIBLE_INVENTORY_FILENAME}}' and doppler secret K3S_ANSIBLE_HOSTS_INVENTORY have diverged.
    #       If you have made changes to the generated inventory file that was downloaded from doppler locally, then please save the inventory file
    #       and ensure you've pushed this to doppler with command `task dp:pk` so that it pulls down the latest inventory before proceeding!
    cmds:
      - "doppler secrets get {{.DOPPLER_K3S_HOSTS_INVENTORY_VAR}} --plain > {{.K3S_ANSIBLE_INVENTORY_FILENAME}}"
