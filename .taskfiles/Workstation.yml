---
version: "3"

vars:
  LOCAL_IMAGE_NAME: homelab_workstation
  REGISTRY_IMAGE_NAME: registry.gitlab.com/sami-group/homelab
  RUN_LOCAL_OR_REGISTRY: "{{.REGISTRY_IMAGE_NAME}}" # Default to running registry container
  HOMELAB_DIR: /workspace/homelab
  DOCKER_RUN_CMD:
    docker container inspect {{.LOCAL_IMAGE_NAME}} > /dev/null 2>&1 > /dev/null 2>&1 || 
    docker run -d -it
    --volume "{{.PROJECT_DIR}}/provision:{{.HOMELAB_DIR}}/provision"
    --volume "{{.PROJECT_DIR}}/.git:{{.HOMELAB_DIR}}/.git"
    --volume "{{.PROJECT_DIR}}/Taskfile.yml:{{.HOMELAB_DIR}}/Taskfile.yml"
    --volume "{{.PROJECT_DIR}}/.taskfiles:{{.HOMELAB_DIR}}/.taskfiles"
    --volume "${HOME}/.ssh/:/home/ubuntu/.ssh"
    --env USER_ID={{.USER_ID}}
    # --user={{.USER_ID}}:{{.USER_ID}}
  # DOCKER_GID_ADD:
  #   sh: "[[ $(id -g) -ge 1000 ]] && echo '--env GROUP_ID={{.GROUP_ID}}' || echo ''"
  DOCKER_BUILD_CMD: docker build -t {{.LOCAL_IMAGE_NAME}}
  DOCKER_EXEC_CMD: docker exec -u {{.USER_ID}} -it {{.LOCAL_IMAGE_NAME}}
  DOCKER_VOLUME_DOTFILES: --volume "${HOME}/.dotfiles:/home/ubuntu/.dotfiles"
  DOCKER_VOLUME_DOPPLER: --volume "{{.PROJECT_DIR}}/.doppler:/home/ubuntu/.doppler"

tasks:

  local-shell:
    desc: üî®üê≥ Build the Homelab Workstation container locally and jump into shell in order to run your automation stuff
    deps: [doppler-login, build-docker]
    aliases: ["ls"]
    interactive: true
    cmds:
      - task: run-docker-dotfiles
        vars:
          RUN_LOCAL_OR_REGISTRY: "{{.LOCAL_IMAGE_NAME}}"
      - "{{.DOCKER_EXEC_CMD}} bash"

  registry-shell:
    desc: üî®üê≥ Download the registry Homelab Workstation image and jump into shell in order to run your automation stuff
    deps: [doppler-login]
    aliases: ["rs"]
    interactive: true
    cmds:
      - task: run-docker-dotfiles
      - "{{.DOCKER_EXEC_CMD}} bash"

  # Figure out how to execute this task when dir doesn't exist..
  doppler-login:
    desc: Creates doppler dir if it doesn't exist and Login to Doppler from inside the container. The volume is mounted in the docker run cmd so it persists upon re-creation unless re-cloning the repo.
    internal: true
    env:
      DOPPLER_CONFIG: "{{.PROJECT_DIR}}/.doppler"
    status: # Check if doppler token exists in file, means we've already logged in, otherwise login!
      - grep -q '\s\+token' ${DOPPLER_CONFIG}/.doppler.yaml
    cmds:
      - "test -d ${DOPPLER_CONFIG} || mkdir ${DOPPLER_CONFIG}"
      - task: run-docker-dotfiles
      - "{{.DOCKER_EXEC_CMD}} doppler login"
      - "{{.DOCKER_EXEC_CMD}} doppler setup --scope {{.HOMELAB_DIR}}"

  # Figure out how to execute this task when dir doesn't exist..
  doppler-test:
    desc: test doppler
    aliases: ["dt"]
    cmds:
      - task: run-docker-dotfiles
      - "{{.DOCKER_EXEC_CMD}} doppler run -- doppler-test"

  cleanup:
    desc: Stop and remove the container if it's running
    aliases: ["c"]
    cmds:
      - task: cleanup-stop
      - task: cleanup-rm

  cleanup-stop:
    desc: Stop the homelab workstation container
    internal: true
    status: # Check if container is running, otherwise stop!
      - "! docker ps | grep -q '{{.LOCAL_IMAGE_NAME}}'"
    cmds:
      - "docker stop {{.LOCAL_IMAGE_NAME}}"

  cleanup-rm:
    desc: Remove the homelab workstation container
    internal: true
    status: # Check if container exists, otherwise destroy!
      - "! docker ps -a | grep -q '{{.LOCAL_IMAGE_NAME}}'"
    cmds:
      - "docker rm {{.LOCAL_IMAGE_NAME}}"

  run-docker:
    desc: Run the docker container from the locally built image (also builds the image)
    internal: true
    run: once
    cmds:
      - "{{.DOCKER_RUN_CMD}} {{.DOCKER_VOLUME_DOPPLER}} --name {{.LOCAL_IMAGE_NAME}} {{.RUN_LOCAL_OR_REGISTRY}}"

  run-docker-dotfiles:
    desc: Run the docker container from the locally built image (also builds the image) with dotfiles volume mount (mainly personal)
    internal: true
    run: once
    cmds:
      - "{{.DOCKER_RUN_CMD}} {{.DOCKER_VOLUME_DOPPLER}} {{.DOCKER_VOLUME_DOTFILES}} --name {{.LOCAL_IMAGE_NAME}} {{.RUN_LOCAL_OR_REGISTRY}}"

  build-docker:
    desc: Builds the docker image locally
    internal: true
    run: once
    status:
      - "docker images | grep -q '{{.LOCAL_IMAGE_NAME}}'"
    cmds:
      - "{{.DOCKER_BUILD_CMD}} ."

  build-docker-no-cache:
    desc: Rebuild the image without using cache
    run: once
    cmds:
      - "{{.DOCKER_BUILD_CMD}} --no-cache ."
