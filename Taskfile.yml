---
# https://taskfile.dev/usage/
# https://github.com/go-task/task

version: "3"

vars:
  PROJECT_DIR:
    # Check if git dir, get full path, otherwise assume running from container
    sh: git rev-parse --show-toplevel
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  USER_HOME_DIR:
    sh: echo $HOME
  USERID:
    sh: id -u
  GROUPID:
    sh: id -g
  # Check if running as root, omit `sudo` from make targets if that is the case.
  DO_SUDO:
    sh: if [ "$UID" -ne 0 ]; then echo "sudo"; fi
  ANSIBLE_DIR: "{{.PROJECT_DIR}}/provision/ansible"
  TERRAFORM_DIR: "{{.PROJECT_DIR}}/provision/terraform"
  # Check if VAULT_PASS is set, and pass through to container, otherwise don't and let stdin in the parse_pass python script, ask for it.
  ANSIBLE_PLAYBOOK_DIR: "{{.ANSIBLE_DIR}}/playbooks"
  ANSIBLE_INVENTORY_DIR: "{{.ANSIBLE_DIR}}/inventory"

env:
  KUBECONFIG: "{{.USER_HOME_DIR}}/.kube/config"
  PATH: "{{.PATH}}:{{.PROJECT_DIR}}/bin"  # add project bin to path
  ANSIBLE_CONFIG: "{{.ANSIBLE_DIR}}/ansible.cfg"
  PROJECT_DIR: "{{.PROJECT_DIR}}"

includes:
  ansible: .taskfiles/AnsibleTasks.yml
  # cluster: .taskfiles/ClusterTasks.yml
  docker: .taskfiles/Docker.yml
  # k3s: .taskfiles/K3s.yml
  lxc: .taskfiles/Lxc.yml
  # minikube: .taskfiles/Minikube.yml
  molecule: .taskfiles/Molecule.yml
  precommit: .taskfiles/PrecommitTasks.yml
  proxmox: .taskfiles/Proxmox.yml
  setup: .taskfiles/Setup.yml
  # sops: .taskfiles/SopsTasks.yml
  terraform: .taskfiles/TerraformTasks.yml
  windows: .taskfiles/Windows.yml
  workstation: .taskfiles/Workstation.yml
  wsl: .taskfiles/Wsl.yml

tasks:

#-------------------#
# Set default tasks #
#-------------------#

  # default:
  #   cmds:
  #     - task: workstation-registry-shell

#---------------------------#
# Vault and Variables Tasks #
#---------------------------#

# Let's allow the user to edit ansible vaults in-place instead of flat out decrypting it to reduce risk of pushing it in cleartext to remote repo.
# Even though I've got the git commit hook in place, when the repo name changes for example, and repo is cloned fresh, this poses a problem when forgetting to run `make setup` first and deploying the hook.
# This approach is just far safer than decrypting and encrypting the files themselves below.

  edit-vault:
    desc: ðŸ”’ Edit ansible vaults in-place instead of flat out decrypting it to reduce risk of pushing it in cleartext to remote repo.
    dir: provision/ansible/inventory/group_vars/all
    cmds:
      - ansible-vault edit vault.yml

  edit-inventory:
    desc: ðŸ”’ Edit ansible inventory in-place instead of flat out decrypting it to reduce risk of pushing it in cleartext to remote repo.
    dir: provision/ansible/inventory
    cmds:
      - ansible-vault edit hosts.ini

  decrypt:
    desc: ðŸ”’ Decrypt vaulted items (requires stored password)
    # internal: true
    dir: provision/ansible/inventory
    cmds:
      - ansible-vault decrypt hosts.ini
      - ansible-vault decrypt group_vars/all/vault.yml

  encrypt:
    desc: ðŸ”’ Encrypt vaulted items (requires stored password)
    # internal: true
    dir: provision/ansible/inventory
    cmds:
      - ansible-vault encrypt hosts.ini
      - ansible-vault encrypt group_vars/all/vault.yml

  list-vars:
    desc: ðŸ”’ List variables
    internal: true
    cmds:
      - $(CURDIR)/bin/vars_list.py vars/config.yml vault.yml {{.CLI_ARGS}}

  list-tags:
    desc: ðŸ”’ List the available tags that you can run standalone from the playbook
    cmds:
      - grep 'tags:' playbook_*.yml | grep -v always | awk -F\" '{print $$2}'

#---------#
# Linters #
#---------#

  # check lint:
  #   desc: ðŸ”Ž Run all tests, Linters & formatters (currently will not fix but sets exit code on error)
  #   cmds:
  #     - echo '**** LGTM! ****'

  # _start-check:
  #   desc: Diagnostic output; useful when run in a git hook
  #   cmds:
  #     - echo 'Running "make check / make lint"'

  # yamllint:
  #   desc: Currently the only one.. will add more targets in the future.
  #   cmds:
  #     - yamllint -f parsable .
