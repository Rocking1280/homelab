---
# https://taskfile.dev/usage/
# https://github.com/go-task/task

version: "3"

vars:
  PROJECT_DIR:
    sh: git rev-parse --show-toplevel
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  USER_HOME_DIR:
    sh: echo $HOME
  USER_ID:
    sh: id -u
  GROUP_ID:
    sh: id -g
  # Check if running as root, omit `sudo` from make targets if that is the case.
  DO_SUDO:
    sh: if [ "$UID" -ne 0 ]; then echo "sudo"; fi

env:
  KUBECONFIG: "{{.USER_HOME_DIR}}/.kube/config"
  PATH: "{{.PATH}}:{{.PROJECT_DIR}}/bin"  # add project bin to path
  PROJECT_DIR: "{{.PROJECT_DIR}}"

includes:
  ansible:
    taskfile: .taskfiles/Ansible.yml
    aliases: ["a", "ans"]
  docker:
    taskfile: .taskfiles/Docker.yml
    aliases: ["d"]
  # cluster: .taskfiles/Flux.yml
  # k3s: .taskfiles/K3s.yml
  lxc:
    taskfile: .taskfiles/Lxc.yml
    aliases: ["l"]
  # minikube: .taskfiles/Minikube.yml
  molecule:
    taskfile: .taskfiles/Molecule.yml
    aliases: ["m"]
  precommit: .taskfiles/Precommit.yml
  proxmox: .taskfiles/Proxmox.yml
  setup:
    taskfile: .taskfiles/Setup.yml
    aliases: ["s"]
  terraform:
    taskfile: .taskfiles/Terraform.yml
    aliases: ["t", "tf"]
  windows:
    taskfile: .taskfiles/Windows.yml
    aliases: ["win"]
  workstation:
    taskfile: .taskfiles/Workstation.yml
    aliases: ["ws"]
  wsl: .taskfiles/Wsl.yml

tasks:

#--------------#
# default task #
#--------------#

  # default:
  #   cmds:
  #     - task: workstation-registry-shell

#------------------#
# Dependency tasks #
#------------------#

  # This task is required by multiple taskfiles, call it like `:generate-ansible-inventory` with a colon to call a task in the main `taskfile.yml` file
  generate-ansible-inventory:
    desc: Copy plain yaml inventory file from doppler and output as a generated inventory.
    internal: true
    cmds:
      - doppler secrets get ANSIBLE_HOSTS_INVENTORY --plain > {{.ANSIBLE_INVENTORY_DIR}}/generated.yml

#---------#
# Linters #
#---------#

  # check lint:
  #   desc: ðŸ”Ž Run all tests, Linters & formatters (currently will not fix but sets exit code on error)
  #   cmds:
  #     - echo '**** LGTM! ****'

  # _start-check:
  #   desc: Diagnostic output; useful when run in a git hook
  #   cmds:
  #     - echo 'Running "make check / make lint"'

  # yamllint:
  #   desc: Currently the only one.. will add more targets in the future.
  #   cmds:
  #     - yamllint -f parsable .
