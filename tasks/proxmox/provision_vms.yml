---
# Issue with this is it is not updating the cloud-init values per machine once it's cloned. Not sure why?
# Could be related to the below commented out code bits, explaining you need to boot up the machine, shutdown, then you can change IP.
# I was able to change IP with this command, just need to loop all vm's and apply:
# qm set 202 --ipconfig0 'ip=10.10.0.22/24,gw=10.10.0.1'

- name: Clone template to new VM's
  proxmox_kvm:
    node: "{{ pve.proxmox_node }}"
    api_user: "{{ pve.proxmox_api_user }}"
    api_password: "{{ pve.proxmox_api_pass }}"
    api_host: "{{ proxmox_ip }}"
    clone: "{{ item.value.template }}"
    full: "yes"
    name: "{{ item.value.name }}"
    storage: "{{ item.value.storage | default(vms_def.storage) }}" 
    timeout: "{{ pve.clone_timeout }}"
    ipconfig:
      ipconfig0: "ip={{ item.value.ip_address }}/{{ vms_def.netmask }},gw={{ vms_def.gateway }}"
    boot: "{{ item.value.boot_order | default(vms_def.boot_order) }}"
    bootdisk: "{{ item.value.boot_disk | default(vms_def.boot_disk) }}"
    newid: "{{ item.value.vmid }}"
    ciuser: "{{ item.value.user | default(vms_def.user) }}"
    cipassword: "{{ item.value.password | default(omit) }}" #OPTIONAL
    sshkeys: "{{ item.value.ssh_key | default(vms_def.ssh_key) }}"
    nameservers:
      - "{{ item.value.dns1| default(vms_def.dns1) }}"
      - "{{ item.value.dns2| default(vms_def.dns2) }}"
    cores: "{{ item.value.cores| default(vms_def.cores) }}"
    memory: "{{ item.value.ram| default(vms_def.ram) }}"
  loop: "{{ vms | dict2items }}"

- name: Expand disks for each VM to their configured amount
  shell:
    cmd: "qm resize {{ item.value.vmid }} scsi0 {{ item.value.hdd_size | default(vms_def.hdd_size) }}"
  loop: "{{ vms | dict2items }}"

- name: Update IP addresses for VM's
  shell:
    cmd: "qm set {{ item.value.vmid }} --ipconfig0 ip={{ item.value.ip_address }}/{{ vms_def.netmask }},gw={{ vms_def.gateway }}"
  loop: "{{ vms | dict2items }}"







# From an old role, leaving here to delete the role

# ---
# # Ref -> https://vectops.com/2020/01/provision-proxmox-vms-with-ansible-quick-and-easy/
# - name: debugging docker_ip
#   debug:
#     var: docker_ip
#   tags: ["always"]
#   when: docker_ip

# # tasks file for proxmox_deploy
# - name: Cloning virtual machine from "{{ vm_template }}" with name "{{ vm_name }}"
#   proxmox_kvm:
#     api_user: "{{ pve.proxmox_api_user }}"
#     api_password: "{{ pve.proxmox_api_pass }}"
#     api_host: "{{ pve_node }}"
#     name: "{{ vm_name }}"
#     node: "{{ pve_node }}"
#     clone: "{{ vm_template }}"
#     timeout: 300
#   tags: provision,test

# - name: Increasing disk if it is necessary
#   shell: |
#     sudo set -o pipefail;
#     A=$(qm list | grep "[[:space:]]{{ vm_name }}[[:space:]]" | awk '{print $1}');
#     qm resize $A {{ default_disk }} +{{ vm_disk_size }}G
#   when: vm_disk_size != "0"
#   tags: provision
#   notify: wait 5s

# - name: starting new Virtual Machine to change IPv4 configuration, it is necessary
#   proxmox_kvm:
#     api_user: "{{ pve.proxmox_api_user }}"
#     api_password: "{{ pve.proxmox_api_pass }}"
#     api_host: "{{ pve_node }}"
#     name: "{{ vm_name }}"
#     node: "{{ pve_node }}"
#     state: started
#     timeout: 300
#   when: vm_disk_size != "0"
#   notify: wait 1m
#   tags: provision

# - name: stopping new Virtual Machine to change IPv4 configuration, it is necessary
#   proxmox_kvm:
#     api_user: "{{ pve.proxmox_api_user }}"
#     api_password: "{{ pve.proxmox_api_pass }}"
#     api_host: "{{ pve_node }}"
#     name: "{{ vm_name }}"
#     node: "{{ pve_node }}"
#     state: stopped
#     timeout: 300
#   when: vm_network != "net0" or vm_disk_size != "0"
#   tags: provision

# - name: Loading set up for Virtual Machine. Assigning IP, sockets, cores and memory for Virtual Machine
#   shell: |
#     sudo set -o pipefail;
#     A=$(qm list | grep "[[:space:]]{{ vm_name }}[[:space:]]" | awk '{print $1}');
#     qm set $A - ipconfig0 'ip={{ docker_ip }}/{{ item.value.netmask }},gw={{ item.value.gateway }}' - nameserver '{{ item.value.dnsservers }}' - searchdomain '{{ item.value.searchdomain }}' - memory '{{ vm_memory }}' - sockets '{{ vm_cpus }}' - cores '{{ vm_cores }}';
#   when: docker_ip != "automatic"
#   with_dict: "{{ vars[vm_network] }}"
#   tags: provision

# - name: debug current ip
#   debug:
#     var: current_ip
#   tags: provision

# - name: Loading set up for Virtual Machine. Assigning IP automatically, sockets, cores and memory for Virtual Machine
#   shell: |
#     sudo set -o pipefail;
#     A=$(qm list | grep "[[:space:]]{{ vm_name }}[[:space:]]" | awk '{print $1}');
#     qm set $A - ipconfig0 'ip={{ current_ip.stdout }}/{{ item.value.netmask }},gw={{ item.value.gateway }}' - nameserver '{{ item.value.dnsservers }}' - searchdomain '{{ item.value.searchdomain }}' - memory '{{ vm_memory }}' - sockets '{{ vm_cpus }}' - cores '{{ vm_cores }}';
#   when: docker_ip == "automatic"
#   with_dict: "{{ vars[vm_network] }}"
#   tags: provision

# - name: debug proxmox node
#   debug:
#     var: "{{ pve_node }}"

# - name: Migrating Virtual Machine if it is necessary
#   shell: |
#     sudo set -o pipefail;
#     A=$(qm list | grep "[[:space:]]{{ vm_name }}[[:space:]]" | awk '{print $1}');
#     qm migrate $A "{{ pve_node }}"
#   when: pve_node != "none"
#   tags: provision

# - name: starting new Virtual Machine in current proxmox node
#   proxmox_kvm:
#     api_user: "{{ pve.proxmox_api_user }}"
#     api_password: "{{ pve.proxmox_api_pass }}"
#     api_host: "{{ pve_node }}"
#     name: "{{ vm_name }}"
#     node: "{{ pve_node }}"
#     state: started
#     timeout: 300
#     when: pve_node == "none"
#     tags: provision

# - name: starting new Virtual Machine in correct proxmox node
#   proxmox_kvm:
#     api_user: "{{ pve.proxmox_api_user }}"
#     api_password: "{{ pve.proxmox_api_pass }}"
#     api_host: "{{ pve_node }}"
#     name: "{{ vm_name }}"
#     node: "{{ pve_node }}"
#     state: started
#     timeout: 300
#   delegate_to: "{{ pve_node }}"
#   when: pve_node != "none"
#   tags: provision
