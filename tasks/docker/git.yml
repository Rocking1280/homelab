---
##############
### Gitlab ###
##############

# Resource -> https://codereview.stackexchange.com/questions/175616/clone-a-gitlab-private-repo-with-ansible

- name: Make sure {{ main_user }} has ssh key
  user:
    name: "{{ main_user }}"
    generate_ssh_key: yes
    ssh_key_file: "{{ user_dir }}/.ssh/{{ main_user_ssh_key_filename }}"

- name: Check if GitLab has this user's SSH key
  uri:
    url: "{{ gitlab.api_url }}/user/keys"
    method: GET
    status_code: [200]
    headers:
      private-token: "{{ gitlab.personal_access_token }}"
      Content-Type: "application/json"
  register: user_ssh_keys

- name: Assign ssh key to a variable
  shell:
    cat {{ user_dir }}/.ssh/{{ main_user_ssh_key_filename }}.pub
  register: deployer_user_public_key
  when: not user_ssh_keys.json | selectattr('title', 'equalto', main_user_ssh_key_title) | list | length > 0

- name: Push the generated ssh key to the GitLab instance
  uri:
      url: "{{ gitlab.api_url }}/user/keys"
      method: POST
      status_code: [201, 400]
      headers:
        private-token: "{{ gitlab.personal_access_token }}"
        Content-Type: "application/json"
      body: >
        {
          "title": "{{ main_user_ssh_key_title }}", 
          "key": "{{ deployer_user_public_key.stdout_lines.0 }}"
        }
      body_format: json
  when: not user_ssh_keys.json | selectattr('title', 'equalto', main_user_ssh_key_title) | list | length > 0

- name: Ensure .ssh/config file exists
  file:
    state: touch
    path: "{{ user_dir }}/.ssh/config"
  when: not user_ssh_keys.json | selectattr('title', 'equalto', main_user_ssh_key_title) | list | length > 0

- name: Disable host key checking
  lineinfile:
    path: "{{ user_dir }}/.ssh/config"
    line: "Host *\n \tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null"
    regexp: '^Host \*$'
  when: not user_ssh_keys.json | selectattr('title', 'equalto', main_user_ssh_key_title) | list | length > 0

- name: Add deploy group to sudoers file and validate
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%{{ docker_group }}'
    line: '%{{ docker_group }} ALL=(ALL) NOPASSWD:ALL'
    validate: "visudo -cf %s"

# TODO:
# Figure out how to add private repo as submodule for home assistant (git@gitlab.com:th3cookie/home-assistant.git).
# track changes made on the server in a repo on that host (i.e. make the files a repo).
# This is better than making your own docker image because changes made by the hass UI can be tracked as well.
# Baked images are done via code, so would still need to setup repo to track it. Not worth it then.

- name: Checkout source code
  git: 
    repo: "{{ item.value }}"
    dest: "{{ docker_dir }}/appdata/{{ item.key }}"
    key_file: "{{ user_dir }}/.ssh/{{ main_user_ssh_key_filename }}"
    accept_hostkey: true
    # clone: false    # Default: true
    # update: false   # Default: true
  with_dict: "{{ gitlab.clone_repos }}"
  ignore_errors: true   # Because Home assistant gets changed to, and realistically, this only needs to be run initially anyway.

- name: Fix repo ownership to user
  file:
    path: "{{ docker_dir }}/appdata/{{ item.key }}"
    state: directory
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0755'
    recurse: true
  with_dict: "{{ gitlab.clone_repos }}"

- name: Touch home-assistant.log for hacs to install as it's install script requires this file to exist
  file:
    path: "{{ docker_dir }}/appdata/hass/home-assistant.log"
    state: touch
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0644'
