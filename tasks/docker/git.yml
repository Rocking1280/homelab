---
##############
### Gitlab ###
##############

# Resource -> https://codereview.stackexchange.com/questions/175616/clone-a-gitlab-private-repo-with-ansible

- name: Make sure {{ main_user }} has ssh key
  user:
    name: "{{ main_user }}"
    generate_ssh_key: yes
    ssh_key_file: "{{ user_dir }}/.ssh/{{ main_user_ssh_key_prefix ~ inventory_hostname_short }}"

# TODO: Needs checking of fingerprint, remove key if not same
- name: Check if GitLab has this user's SSH key
  uri:
    url: "{{ gitlab.api_url }}/user/keys"
    method: GET
    status_code: [200]
    headers:
      private-token: "{{ gitlab.personal_access_token }}"
      Content-Type: "application/json"
  register: user_ssh_keys

- name: debug user_ssh_keys
  debug:
    var: user_ssh_keys

- name: Assign ssh key to a variable
  shell:
    cat {{ user_dir }}/.ssh/{{ main_user_ssh_key_prefix ~ inventory_hostname_short }}.pub
  register: deployer_user_public_key
  when: not user_ssh_keys.json | selectattr('title', 'equalto', main_user_ssh_key_prefix ~ inventory_hostname_short) | list | length > 0

- name: Push the generated ssh key to the GitLab instance
  uri:
      url: "{{ gitlab.api_url }}/user/keys"
      method: POST
      status_code: [201, 400]
      headers:
        private-token: "{{ gitlab.personal_access_token }}"
        Content-Type: "application/json"
      body: >
        {
          "title": "{{ main_user_ssh_key_prefix ~ inventory_hostname_short }}", 
          "key": "{{ deployer_user_public_key.stdout_lines.0 }}"
        }
      body_format: json
  when: not user_ssh_keys.json | selectattr('title', 'equalto', main_user_ssh_key_prefix ~ inventory_hostname_short) | list | length > 0

- name: Ensure .ssh/config file exists
  file:
    state: touch
    path: "{{ user_dir }}/.ssh/config"
  when: not user_ssh_keys.json | selectattr('title', 'equalto', main_user_ssh_key_prefix ~ inventory_hostname_short) | list | length > 0

- name: Disable host key checking
  lineinfile:
    path: "{{ user_dir }}/.ssh/config"
    line: "Host *\n \tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null"
    regexp: '^Host \*$'
  when: not user_ssh_keys.json | selectattr('title', 'equalto', main_user_ssh_key_prefix ~ inventory_hostname_short) | list | length > 0

- name: Add deploy group to sudoers file and validate
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%{{ docker_group }}'
    line: '%{{ docker_group }} ALL=(ALL) NOPASSWD:ALL'
    validate: "visudo -cf %s"

### This may not be required now that I set `become: false` on checkout of source code. Needs testing..
# - name: mark git dirs as safe in git config
#   community.general.git_config:
#     name: safe.directory
#     scope: global
#     value: "{{ docker_dir }}/appdata/{{ item.key }}"
#   with_dict: "{{ gitlab.clone_repos }}"

################
### Dotfiles ###
################

- name: Get dotfiles repo
  git: 
    repo: "{{ gitlab.dotfiles.repo }}"
    dest: "{{ user_dir }}/.dotfiles"
    version: "{{ gitlab.dotfiles.branch }}"
    track_submodules: true
    key_file: "{{ user_dir }}/.ssh/{{ main_user_ssh_key_prefix ~ inventory_hostname_short }}"
    accept_hostkey: true
  ignore_errors: true
  become: false

- name: checkout docker branch in dotfiles-extras repo
  git: 
    repo: "{{ gitlab.dotfiles.extra_repo }}"
    dest: "{{ user_dir }}/.dotfiles/dotfiles-extra"
    version: "{{ gitlab.dotfiles.extra_branch }}"
    key_file: "{{ user_dir }}/.ssh/{{ main_user_ssh_key_prefix ~ inventory_hostname_short }}"
    accept_hostkey: true
  ignore_errors: true
  become: false

- name: Build directories list
  ansible.builtin.find:
    paths: ["{{ user_dir }}/.dotfiles"]
    recurse: no
    file_type: directory
  register: files_to_stow

### Needs work
# - name: Set conflicting stow files fact
#   set_fact:
#     stow_conflicts:
#       - "{{ user_dir }}/.bashrc"
#       - "{{ user_dir }}/.gitconfig"
#       - "{{ user_dir }}/.ssh/config"

# - name: Move conflicting files
#   copy:
#     remote_src: True
#     src: "{{ item }}"
#     dest: "{{ item }}.old"
#   with_items: "{{ stow_conflicts }}"

# - name: Remove original files in place of stowed dotfiles
#   file:
#     path: "{{ item }}"
#     state: absent
#   with_items: "{{ stow_conflicts }}"

- name: Deploy dotfiles with stow
  ansible.builtin.shell: stow {{ item.path | basename }}
  environment:
    STOW_DIR: "{{ user_dir }}/.dotfiles"
  changed_when: false
  with_items: '{{ files_to_stow.files }}'

- name: Checkout source code
  git: 
    repo: "{{ item.value }}"
    dest: "{{ docker_dir }}/appdata/{{ item.key }}"
    key_file: "{{ user_dir }}/.ssh/{{ main_user_ssh_key_prefix ~ inventory_hostname_short }}"
    accept_hostkey: true
  with_dict: "{{ gitlab.clone_repos }}"
  register: git_checkout_code
  ignore_errors: true   # Because Home assistant gets changed to, and realistically, this only needs to be run initially anyway.
  become: false

# Let's assert that the last command is a success when certain things exist - Needs work
# There is no success_when variable that I can use the loop above so I have to assert something after the fact.
# - name: debugging git_checkout_code
#   debug:
#     var: git_checkout_code
# - name: Is it an error we can disregard?
#   assert:
#     that:
#       - "'unsafe repository' in item['msg']"
#       - "'is owned by someone else' in item['msg']"
#       - "'Local modifications exist' in item['msg']"
#     fail_msg: "The last task failed, please review."
#     success_msg: "The last task failures were expected. Continuing..."
#   with_items: git_checkout_code.results

- name: Fix repo ownership to user
  file:
    path: "{{ docker_dir }}/appdata/{{ item.key }}"
    state: directory
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0755'
    recurse: true
  with_dict: "{{ gitlab.clone_repos }}"

- name: Touch home-assistant.log for hacs to install as it's install script requires this file to exist
  file:
    path: "{{ docker_dir }}/appdata/hass/home-assistant.log"
    state: touch
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0644'
