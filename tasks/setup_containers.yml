---
- name: Read docker-compose.yml into variable for parsing service names
  delegate_to: localhost
  command: "cat files/docker-compose.yml"
  register: dc_obj

- name: Create dict dc_yaml_object from docker-compose file
  set_fact:
    # Set dict inside jinja, iterate through all services appending to that jinja dict, end loop and return that list
    dc_yaml_obj: "{{ dc_obj.stdout | from_yaml }}"

- name: Create docker-compose services list fact
  set_fact:
    # Set dict inside jinja, iterate through all services appending to that jinja dict, end loop and return that list to ansible list
    services: >-
      [
        {% set services = [] %}
        {%- for key, value in dc_yaml_obj.services.items() -%}
        {%- do services.append(key) -%}
        {% endfor %}
        {{ services }}
      ]

- name: Create directories for services
  file:
    path: "{{ docker_dir }}/{{ item }}"
    state: directory
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0755'
  with_items: "{{ services }}"

- name: Create extra required directories recursively
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0755'
    recurse: true
  with_items: "{{ required_items.folders }}"

# Optimize the playbook by non-recursively creating dirs (these are big)
- name: Create extra required directories non-recursively
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0755'
    recurse: false
  with_items: "{{ required_items.no_recurse_folders }}"

- name: Touch required files to ensure they exists
  file:
    path: "{{ item }}"
    state: touch
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0644'
  with_items: "{{ required_items.files }}"

- name: Copy docker folder and all files across maintaining perms from repo
  copy:
    src: files/docker
    dest: "{{ user_dir }}"
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"

- name: Touch files with 600 perms
  file:
    path: "{{ docker_dir }}/{{ item }}"
    state: touch
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0600'
  with_items:
    - traefik/acme/acme.json

# Ensure the path to the templates files exist as they would in the docker directory
# i.e. this task is going to just copy them in a templated way from src to dest
- name: find docker templates
  find:
    paths: "{{ playbook_dir }}/templates/docker"
    recurse: true
  delegate_to: localhost
  register: full_path_docker_templates

- name: set relative paths variable for docker templates
  set_fact:
    docker_templates: >-
      [
        {%- for item in full_path_docker_templates.files | map(attribute='path') -%}
        '{{ item.split("templates/")[1] }}',
        {%- endfor -%}
      ]

- name: Copy docker templates
  template:
    src: "{{ item }}"
    dest: "{{ user_dir }}/{{ item }}"
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0644'
  with_items: "{{ docker_templates }}"

- name: Make scripts executable
  file:
    path: "{{ docker_dir }}/scripts"
    mode: '0755'
    recurse: true

- name: Hash Authelia passwords
  shell:   # can't user docker resource because it uses the loki logging driver, so no output in ansible return
    cmd: "docker run --rm authelia/authelia:latest authelia hash-password {{ item.value.password }} | cut -d\\  -f 3"
  register: authelia_hashed_passwords_result
  with_dict: "{{ authelia.users }}"
  no_log: true

- name: Set hashed Authelia passwords fact
  set_fact:
    authelia_hashed_passwords: "{{ authelia_hashed_passwords | default({}) | combine( {'users': {item.item.key: item.stdout}}, recursive=True) }}"
  with_items:
    - "{{ authelia_hashed_passwords_result.results }}"
  no_log: true

- name: Touch authelia users_database file to ensure it exists
  file:
    path: "{{ docker_dir }}/authelia/users_database.yml"
    state: touch
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0644'

- name: Check if authelia users need to be updated in users_database file
  lineinfile:
    path: "{{ docker_dir }}/authelia/users_database.yml"
    regexp: "{{ item.key }}:"
    line: "dummy"
    state: absent
  check_mode: true
  with_dict: "{{ authelia_hashed_passwords.users }}"
  changed_when: false
  register: authelia_exists
  no_log: true

- name: Calculate authelia users_database return result
  set_fact:
    authelia_found: >-
      {% set count = [] %}
      {%- for result in authelia_exists.results -%}
      {%- if result.found == 1 -%}
      {%- set __ = count.append(1) -%}
      {%- endif -%}
      {%- endfor -%}
      {{ count|length }}

- name: Copy authelia users_database template if any user not in authelia users_database
  template:
    src: "authelia/users_database.yml"
    dest: "{{ docker_dir }}/authelia/users_database.yml"
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0644'
  when: authelia_found|int < authelia_hashed_passwords.users | list | count

- name: Importing update-compose task
  import_tasks: update_compose.yml
  when: update_compose

- name: Check if user is in mqtt passwd file
  lineinfile:
    path: "{{ docker_dir }}/mqtt/config/passwd"
    regexp: "^{{ item.key }}.*"
    line: "dummy"
    state: absent
  check_mode: true
  with_dict: "{{ mqtt_logins }}"
  changed_when: false
  register: mqtt_passwd_output
  no_log: true

- name: Calculate mqtt passwd return result count
  set_fact:
    mqtt_found: >-
      {% set count = [] %}
      {%- for result in mqtt_passwd_output.results -%}
      {%- if result.found == 1 -%}
      {%- set __ = count.append(1) -%}
      {%- endif -%}
      {%- endfor -%}
      {{ count|length }}

- name: Regenerate file if any user not in mqtt passwd
  community.docker.docker_container_exec:
    container: mqtt
    command: "mosquitto_passwd -b /mosquitto/config/passwd {{ item.key }} {{ item.value }}"
  with_dict: "{{ mqtt_logins }}"
  when: mqtt_found|int < mqtt_logins|list|count
  no_log: true

- name: Touch htpasswd docker secret file to ensure it exists
  file:
    path: "{{ docker_dir }}/secrets/htpasswd"
    state: touch
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: '0644'

- name: Check if htpasswd users need to be updated in htpasswd file
  lineinfile:
    path: "{{ docker_dir }}/secrets/htpasswd"
    regexp: "^{{ item.key }}.*"
    line: "dummy"
    state: absent
  check_mode: true
  with_dict: "{{ htpasswd_logins }}"
  changed_when: false
  register: htpasswd_output
  no_log: true

- name: Calculate htpasswd return result
  set_fact:
    htpasswd_found: >-
      {%- for result in htpasswd_output.results -%}
      {{ result.found }}
      {%- endfor -%}

- name: Regenerate file if any user not in htpasswd
  htpasswd:
    path: "{{ docker_dir }}/secrets/htpasswd"
    name: "{{ item.key }}"
    password: "{{ item.value }}"
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    mode: 0640
  with_dict: "{{ htpasswd_logins }}"
  when: htpasswd_found|int < 1
  no_log: true

- name: Setup zigbee2mqtt configuration file
  blockinfile:
    path: "{{ docker_dir }}/zigbee2mqtt/configuration.yaml"
    create: true
    owner: "{{ main_user }}"
    group: "{{ docker_group }}"
    block: |
      homeassistant: true
      permit_join: false
      mqtt:
        base_topic: zigbee2mqtt
        server: mqtt://localhost
        user: {{ zigbe2mqtt_user }}
        password: {{ mqtt_logins[zigbe2mqtt_user] }}
      serial:
        port: {{ home_assistant.zigbee_adapter_tty }} 
      frontend:
        port: {{ zigbee2mqtt_port }}

# This gets overwritten whenever the container reboots, so leave it out.
# - name: Setup gitlab-runner config
#   blockinfile:
#     path: "{{ docker_dir }}/gitlab-runner/config.toml"
#     create: true
#     owner: "{{ main_user }}"
#     group: "{{ docker_group }}"
#     block: |
#       # Resource -> https://docs.gitlab.com/runner/configuration/advanced-configuration.html

#       concurrent = 1
#       check_interval = 5
#       log_level = "info"   # Options are: debug, info, warn, error, fatal, and panic
#       log_format = "json"  # Options are: runner, text, and json

#       [session_server]
#         session_timeout = 1800

# TODO: Setup git clone of submodules instead of doing them in ansible. This is better for automation in ci/cd pipelines later. Trust brah.
# Also setup deploy key (ssh key) if not created `id_rsa_docker`. Then provide instructions on adding the public key to gitlab.
